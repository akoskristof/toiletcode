// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String     @id @default(cuid())
  email         String     @unique
  name          String
  emailVerified DateTime?
  image         String?
  password      String?
  role          Role       @default(BASIC)
  createdAt     DateTime   @default(now()) @map(name: "created_at")
  updatedAt     DateTime   @updatedAt @map(name: "updated_at")
  locations     Location[]
  posts         Post[]
  reactions     Reaction[]
  accounts      Account[]
  sessions      Session[]

  @@map(name: "users")
}

model Location {
  id        String   @id @default(cuid())
  lat       Float
  lng       Float
  name      String
  author    User     @relation(fields: [userId], references: [id])
  userId    String
  Post      Post[]
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")
}

model Post {
  id         String     @id @default(cuid())
  message    String?
  location   Location   @relation(fields: [locationId], references: [id])
  code       String
  reactions  Reaction[]
  author     User       @relation(fields: [userId], references: [id])
  userId     String
  locationId String
  createdAt  DateTime   @default(now()) @map(name: "created_at")
  updatedAt  DateTime   @updatedAt @map(name: "updated_at")
}

model Reaction {
  id           String   @id @default(cuid())
  like_dislike Boolean
  comment      String?
  author       User     @relation(fields: [userId], references: [id])
  post         Post     @relation(fields: [postId], references: [id])
  postId       String
  userId       String
  createdAt    DateTime @default(now()) @map(name: "created_at")
  updatedAt    DateTime @updatedAt @map(name: "updated_at")
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  BASIC
  ADMIN
}
